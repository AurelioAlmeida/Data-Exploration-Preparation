"Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg",
"Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia",
"Slovenia", "Spain", "Sweden"
)
# Filter the dataset for EU countries
eu_dataset <- subset(Global_Covid_Dataset_, location %in% eu_countries)
# Assuming your dataset is stored in a variable named eu_dataset
# Make sure the 'date' column is in the correct date format
eu_dataset$date <- lubridate::mdy(eu_dataset$date)
# Remove rows with missing values in 'total_cases', 'total_deaths', 'location', and 'date'
eu_dataset <- na.omit(eu_dataset[c("date", "total_cases", "total_deaths", "location")])
# Select the top 5 countries with the highest total cases
top_countries <- eu_dataset %>%
group_by(location) %>%
summarize(max_total_cases = max(total_cases)) %>%
arrange(desc(max_total_cases)) %>%
head(5)
# Filter the dataset for the top 5 countries
top_countries_data <- eu_dataset %>%
filter(location %in% top_countries$location)
# Create a heatmap for total cases of the top 5 countries over time
ggplot(top_countries_data, aes(x = as.factor(year(date)), y = location, fill = total_cases)) +
geom_tile(color = "white", size = 0.2) +  # Add white borders for better separation
scale_fill_gradient(low = "lightgreen", high = "darkgreen", na.value = "white") +  # Adjust color scale
labs(title = "Heatmap of Total Cases Over Time for the Top 5 Countries",
x = "Year",
y = "Country",
fill = "Total Cases") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # Keep x-axis labels straight
legend.position = "right")  # Adjust legend position
# Assuming your dataset is stored in a variable named eu_dataset
# Make sure the 'date' column is in the correct date format
eu_dataset$date <- lubridate::mdy(eu_dataset$date)
# Remove rows with missing values in 'total_cases', 'total_deaths', 'location', and 'date'
eu_dataset <- na.omit(eu_dataset[c("date", "total_cases", "total_deaths", "location")])
# Select the top 5 countries with the highest total cases
top_countries <- eu_dataset %>%
group_by(location) %>%
summarize(max_total_cases = max(total_cases)) %>%
arrange(desc(max_total_cases)) %>%
head(5)
# Filter the dataset for the top 5 countries
top_countries_data <- eu_dataset %>%
filter(location %in% top_countries$location)
# Create a heatmap for total cases of the top 5 countries over time
ggplot(top_countries_data, aes(x = as.factor(year(date)), y = location, fill = total_cases)) +
geom_tile(color = "white", size = 0.2) +  # Add white borders for better separation
scale_fill_viridis_c(option = "magma", na.value = "white") +  # Adjust color scale to magma
labs(title = "Heatmap of Total Cases Over Time for the Top 5 Countries",
x = "Year",
y = "Country",
fill = "Total Cases") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # Keep x-axis labels straight
legend.position = "right") +  # Adjust legend position
scale_fill_continuous(labels = scales::comma_format(scale = 1e-6))  # Adjust the scale as needed
# Load the dataset
Global_Covid_Dataset_ <- read.csv("C:/Users/AurelioAlmeida/Documents/GitHub/Data-Exploration-Preparation/Global Covid Dataset .csv")
# Check dataset structure
str(data)
# Display dataset first few rows
head(data)
# Check number of rows
num_rows <- nrow(data)
print(num_rows)
# List of EU countries
eu_countries <- c(
"Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg",
"Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia",
"Slovenia", "Spain", "Sweden"
)
# Filter the dataset for EU countries
eu_dataset <- subset(Global_Covid_Dataset_, location %in% eu_countries)
# Assuming your dataset is stored in a variable named eu_dataset
# Make sure the 'date' column is in the correct date format
eu_dataset$date <- lubridate::mdy(eu_dataset$date)
# Remove rows with missing values in 'total_cases', 'total_deaths', 'location', and 'date'
eu_dataset <- na.omit(eu_dataset[c("date", "total_cases", "total_deaths", "location")])
# Select the top 5 countries with the highest total cases
top_countries <- eu_dataset %>%
group_by(location) %>%
summarize(max_total_cases = max(total_cases)) %>%
arrange(desc(max_total_cases)) %>%
head(5)
# Filter the dataset for the top 5 countries
top_countries_data <- eu_dataset %>%
filter(location %in% top_countries$location)
# Create a heatmap for total cases of the top 5 countries over time
ggplot(top_countries_data, aes(x = as.factor(year(date)), y = location, fill = total_cases)) +
geom_tile(color = "white", size = 0.2) +  # Add white borders for better separation
scale_fill_viridis_c(option = "magma", na.value = "white") +  # Adjust color scale to magma
labs(title = "Heatmap of Total Cases Over Time for the Top 5 Countries",
x = "Year",
y = "Country",
fill = "Total Cases") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # Keep x-axis labels straight
legend.position = "right") +  # Adjust legend position
scale_fill_continuous(labels = scales::comma_format(scale = 1e-6))  # Adjust the scale as needed
# Load the dataset
Global_Covid_Dataset_ <- read.csv("C:/Users/AurelioAlmeida/Documents/GitHub/Data-Exploration-Preparation/Global Covid Dataset .csv")
# Check dataset structure
str(data)
# Display dataset first few rows
head(data)
# Check number of rows
num_rows <- nrow(data)
print(num_rows)
# List of EU countries
eu_countries <- c(
"Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg",
"Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia",
"Slovenia", "Spain", "Sweden"
)
# Filter the dataset for EU countries
eu_dataset <- subset(Global_Covid_Dataset_, location %in% eu_countries)
# Assuming your dataset is stored in a variable named eu_dataset
# Make sure the 'date' column is in the correct date format
eu_dataset$date <- lubridate::mdy(eu_dataset$date)
# Remove rows with missing values in 'total_cases', 'total_deaths', 'location', and 'date'
eu_dataset <- na.omit(eu_dataset[c("date", "total_cases", "total_deaths", "location")])
# Select the top 5 countries with the highest total cases
top_countries <- eu_dataset %>%
group_by(location) %>%
summarize(max_total_cases = max(total_cases)) %>%
arrange(desc(max_total_cases)) %>%
head(5)
# Filter the dataset for the top 5 countries
top_countries_data <- eu_dataset %>%
filter(location %in% top_countries$location)
# Create a heatmap for total cases of the top 5 countries over time
ggplot(top_countries_data, aes(x = as.factor(year(date)), y = location, fill = total_cases)) +
geom_tile(color = "white", size = 0.2) +  # Add white borders for better separation
scale_fill_viridis_c(option = "magma", na.value = "white") +  # Adjust color scale to magma
labs(title = "Heatmap of Total Cases Over Time for the Top 5 Countries",
x = "Year",
y = "Country",
fill = "Total Cases") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # Keep x-axis labels straight
legend.position = "right") +  # Adjust legend position
scale_fill_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M"))  # Use label_number to format as millions
# Load the dataset
Global_Covid_Dataset_ <- read.csv("C:/Users/AurelioAlmeida/Documents/GitHub/Data-Exploration-Preparation/Global Covid Dataset .csv")
# Check dataset structure
str(data)
# Display dataset first few rows
head(data)
# Check number of rows
num_rows <- nrow(data)
print(num_rows)
# List of EU countries
eu_countries <- c(
"Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg",
"Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia",
"Slovenia", "Spain", "Sweden"
)
# Filter the dataset for EU countries
eu_dataset <- subset(Global_Covid_Dataset_, location %in% eu_countries)
# Assuming your dataset is stored in a variable named eu_dataset
# Make sure the 'date' column is in the correct date format
eu_dataset$date <- lubridate::mdy(eu_dataset$date)
# Remove rows with missing values in 'total_cases', 'total_deaths', 'location', and 'date'
eu_dataset <- na.omit(eu_dataset[c("date", "total_cases", "total_deaths", "location")])
# Select the top 5 countries with the highest total cases
top_countries <- eu_dataset %>%
group_by(location) %>%
summarize(max_total_cases = max(total_cases)) %>%
arrange(desc(max_total_cases)) %>%
head(5)
# Filter the dataset for the top 5 countries
top_countries_data <- eu_dataset %>%
filter(location %in% top_countries$location)
# Create a heatmap for total cases of the top 5 countries over time
ggplot(top_countries_data, aes(x = as.factor(year(date)), y = location, fill = total_cases)) +
geom_tile(color = "white", size = 0.2) +  # Add white borders for better separation
scale_fill_viridis_c(option = "plasma", na.value = "white") +  # Adjust color scale to plasma
labs(title = "Heatmap of Total Cases Over Time for the Top 5 Countries",
x = "Year",
y = "Country",
fill = "Total Cases") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # Keep x-axis labels straight
legend.position = "right") +  # Adjust legend position
scale_fill_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M"))  # Use label_number to format as millions
# Assuming your dataset is stored in a variable named eu_dataset
# Make sure the 'date' column is in the correct date format
eu_dataset$date <- lubridate::mdy(eu_dataset$date)
# Remove rows with missing values in 'total_cases', 'total_deaths', 'location', and 'date'
eu_dataset <- na.omit(eu_dataset[c("date", "total_cases", "total_deaths", "location")])
# Select the top 5 countries with the highest total cases
top_countries <- eu_dataset %>%
group_by(location) %>%
summarize(max_total_cases = max(total_cases)) %>%
arrange(desc(max_total_cases)) %>%
head(5)
# Filter the dataset for the top 5 countries
top_countries_data <- eu_dataset %>%
filter(location %in% top_countries$location)
# Create a heatmap for total cases of the top 5 countries over time
ggplot(top_countries_data, aes(x = as.factor(year(date)), y = location, fill = total_cases)) +
geom_tile(color = "white", size = 0.2) +  # Add white borders for better separation
scale_fill_viridis_c(option = "plasma", na.value = "white") +  # Adjust color scale to plasma
labs(title = "Heatmap of Total Cases Over Time for the Top 5 Countries",
x = "Year",
y = "Country",
fill = "Total Cases") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # Keep x-axis labels straight
legend.position = "right") +  # Adjust legend position
scale_fill_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M"))  # Use label_number to format as millions
# Load the dataset
Global_Covid_Dataset_ <- read.csv("C:/Users/AurelioAlmeida/Documents/GitHub/Data-Exploration-Preparation/Global Covid Dataset .csv")
# Check dataset structure
str(data)
# Display dataset first few rows
head(data)
# Check number of rows
num_rows <- nrow(data)
print(num_rows)
# List of EU countries
eu_countries <- c(
"Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg",
"Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia",
"Slovenia", "Spain", "Sweden"
)
# Filter the dataset for EU countries
eu_dataset <- subset(Global_Covid_Dataset_, location %in% eu_countries)
# Assuming your dataset is stored in a variable named eu_dataset
# Make sure the 'date' column is in the correct date format
eu_dataset$date <- lubridate::mdy(eu_dataset$date)
# Remove rows with missing values in 'total_cases', 'total_deaths', 'location', and 'date'
eu_dataset <- na.omit(eu_dataset[c("date", "total_cases", "total_deaths", "location")])
# Select the top 5 countries with the highest total cases
top_countries <- eu_dataset %>%
group_by(location) %>%
summarize(max_total_cases = max(total_cases)) %>%
arrange(desc(max_total_cases)) %>%
head(5)
# Filter the dataset for the top 5 countries
top_countries_data <- eu_dataset %>%
filter(location %in% top_countries$location)
# Create a heatmap for total cases of the top 5 countries over time
ggplot(top_countries_data, aes(x = as.factor(year(date)), y = location, fill = total_cases)) +
geom_tile(color = "white", size = 0.2) +  # Add white borders for better separation
scale_fill_viridis_c(option = "plasma", na.value = "white") +  # Adjust color scale to plasma
labs(title = "Heatmap of Total Cases Over Time for the Top 5 Countries",
x = "Year",
y = "Country",
fill = "Total Cases") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # Keep x-axis labels straight
legend.position = "right") +  # Adjust legend position
scale_fill_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M"))  # Use label_number to format as millions
# Load the dataset
Global_Covid_Dataset_ <- read.csv("C:/Users/AurelioAlmeida/Documents/GitHub/Data-Exploration-Preparation/Global Covid Dataset .csv")
# Check dataset structure
str(data)
# Display dataset first few rows
head(data)
# Check number of rows
num_rows <- nrow(data)
print(num_rows)
# List of EU countries
eu_countries <- c(
"Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg",
"Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia",
"Slovenia", "Spain", "Sweden"
)
# Filter the dataset for EU countries
eu_dataset <- subset(Global_Covid_Dataset_, location %in% eu_countries)
# Assuming your dataset is stored in a variable named eu_dataset
# Make sure the 'date' column is in the correct date format
eu_dataset$date <- lubridate::mdy(eu_dataset$date)
# Remove rows with missing values in 'total_cases', 'total_deaths', 'location', and 'date'
eu_dataset <- na.omit(eu_dataset[c("date", "total_cases", "total_deaths", "location")])
# Select the top 5 countries with the highest total cases
top_countries <- eu_dataset %>%
group_by(location) %>%
summarize(max_total_cases = max(total_cases)) %>%
arrange(desc(max_total_cases)) %>%
head(5)
# Filter the dataset for the top 5 countries
top_countries_data <- eu_dataset %>%
filter(location %in% top_countries$location)
# Create a heatmap for total cases of the top 5 countries over time
ggplot(top_countries_data, aes(x = as.factor(year(date)), y = location, fill = total_cases)) +
geom_tile(color = "white", size = 0.2) +  # Add white borders for better separation
scale_fill_gradientn(colors = c("#f7fcb9", "#addd8e", "#31a354"), na.value = "white") +  # Adjust color scale to YlGnBu
labs(title = "Heatmap of Total Cases Over Time for the Top 5 Countries",
x = "Year",
y = "Country",
fill = "Total Cases") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # Keep x-axis labels straight
legend.position = "right") +  # Adjust legend position
scale_fill_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M"))  # Use label_number to format as millions
# Load the dataset
Global_Covid_Dataset_ <- read.csv("C:/Users/AurelioAlmeida/Documents/GitHub/Data-Exploration-Preparation/Global Covid Dataset .csv")
# Check dataset structure
str(data)
# Display dataset first few rows
head(data)
# Check number of rows
num_rows <- nrow(data)
print(num_rows)
# List of EU countries
eu_countries <- c(
"Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg",
"Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia",
"Slovenia", "Spain", "Sweden"
)
# Filter the dataset for EU countries
eu_dataset <- subset(Global_Covid_Dataset_, location %in% eu_countries)
# Assuming your dataset is stored in a variable named eu_dataset
# Make sure the 'date' column is in the correct date format
eu_dataset$date <- lubridate::mdy(eu_dataset$date)
# Remove rows with missing values in 'total_cases', 'total_deaths', 'location', and 'date'
eu_dataset <- na.omit(eu_dataset[c("date", "total_cases", "total_deaths", "location")])
# Select the top 5 countries with the highest total cases
top_countries <- eu_dataset %>%
group_by(location) %>%
summarize(max_total_cases = max(total_cases)) %>%
arrange(desc(max_total_cases)) %>%
head(5)
# Filter the dataset for the top 5 countries
top_countries_data <- eu_dataset %>%
filter(location %in% top_countries$location)
# Create a heatmap for total cases of the top 5 countries over time
ggplot(top_countries_data, aes(x = as.factor(year(date)), y = location, fill = total_cases)) +
geom_tile(color = "white", size = 0.2) +  # Add white borders for better separation
scale_fill_viridis_c(option = "magma", na.value = "white") +  # Adjust color scale to magma
labs(title = "Heatmap of Total Cases Over Time for the Top 5 Countries",
x = "Year",
y = "Country",
fill = "Total Cases") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # Keep x-axis labels straight
legend.position = "right") +  # Adjust legend position
scale_fill_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M"))  # Use label_number to format as millions
# Load the dataset
Global_Covid_Dataset_ <- read.csv("C:/Users/AurelioAlmeida/Documents/GitHub/Data-Exploration-Preparation/Global Covid Dataset .csv")
# Check dataset structure
str(data)
# Display dataset first few rows
head(data)
# Check number of rows
num_rows <- nrow(data)
print(num_rows)
# List of EU countries
eu_countries <- c(
"Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg",
"Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia",
"Slovenia", "Spain", "Sweden"
)
# Filter the dataset for EU countries
eu_dataset <- subset(Global_Covid_Dataset_, location %in% eu_countries)
##Plot line
# Make sure the 'date' column is in the correct date format
eu_dataset$date <- lubridate::mdy(eu_dataset$date)
# Remove rows with missing values in 'total_cases', 'total_deaths', 'location', and 'date'
eu_dataset <- na.omit(eu_dataset[c("date", "total_cases", "total_deaths", "location")])
# Select the top 5 countries with the highest total cases
top_countries <- eu_dataset %>%
group_by(location) %>%
summarize(max_total_cases = max(total_cases)) %>%
arrange(desc(max_total_cases)) %>%
head(5)
# Filter the dataset for the top 5 countries
top_countries_data <- eu_dataset %>%
filter(location %in% top_countries$location)
# Create a line plot for total cases and total deaths by location
ggplot(top_countries_data, aes(x = date, y = total_cases, group = location, color = location)) +
geom_line(aes(y = total_deaths)) +
labs(title = "Total Cases Over Time of the 5 Countries with the Highest Total Cases", x = "Date", y = "Total of Cases") +
theme_minimal()
##Heatmaps
# Make sure the 'date' column is in the correct date format
eu_dataset$date <- lubridate::mdy(eu_dataset$date)
# Remove rows with missing values in 'total_cases', 'total_deaths', 'location', and 'date'
eu_dataset <- na.omit(eu_dataset[c("date", "total_cases", "total_deaths", "location")])
# Select the top 5 countries with the highest total cases
top_countries <- eu_dataset %>%
group_by(location) %>%
summarize(max_total_cases = max(total_cases)) %>%
arrange(desc(max_total_cases)) %>%
head(5)
# Filter the dataset for the top 5 countries
top_countries_data <- eu_dataset %>%
filter(location %in% top_countries$location)
# Create a heatmap for total cases of the top 5 countries over time
ggplot(top_countries_data, aes(x = as.factor(year(date)), y = location, fill = total_cases)) +
geom_tile(color = "white", size = 0.2) +  # Add white borders for better separation
scale_fill_viridis_c(option = "magma", na.value = "white") +  # Adjust color scale to magma
labs(title = "Heatmap of Total Cases Over Time for top 5 countries with the highest total cases",
x = "Year",
y = "Country",
fill = "Total Cases") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # Keep x-axis labels straight
legend.position = "right") +  # Adjust legend position
scale_fill_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M"))  # Use label_number to format as millions
# Load the dataset
Global_Covid_Dataset_ <- read.csv("C:/Users/AurelioAlmeida/Documents/GitHub/Data-Exploration-Preparation/Global Covid Dataset .csv")
# Check dataset structure
str(data)
# Display dataset first few rows
head(data)
# Check number of rows
num_rows <- nrow(data)
print(num_rows)
# List of EU countries
eu_countries <- c(
"Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg",
"Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia",
"Slovenia", "Spain", "Sweden"
)
# Filter the dataset for EU countries
eu_dataset <- subset(Global_Covid_Dataset_, location %in% eu_countries)
##Heatmaps
# Make sure the 'date' column is in the correct date format
eu_dataset$date <- lubridate::mdy(eu_dataset$date)
# Remove rows with missing values in 'total_cases', 'total_deaths', 'location', and 'date'
eu_dataset <- na.omit(eu_dataset[c("date", "total_cases", "total_deaths", "location")])
# Select the top 5 countries with the highest total cases
top_countries <- eu_dataset %>%
group_by(location) %>%
summarize(max_total_cases = max(total_cases)) %>%
arrange(desc(max_total_cases)) %>%
head(5)
# Filter the dataset for the top 5 countries
top_countries_data <- eu_dataset %>%
filter(location %in% top_countries$location)
# Create a heatmap for total cases of the top 5 countries over time
ggplot(top_countries_data, aes(x = as.factor(year(date)), y = location, fill = total_cases)) +
geom_tile(color = "white", size = 0.2) +  # Add white borders for better separation
scale_fill_viridis_c(option = "magma", na.value = "white") +  # Adjust color scale to magma
labs(title = "Heatmap of Total Cases Over Time for top 5 countries with the highest total cases",
x = "Year",
y = "Country",
fill = "Total Cases") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1),  # Keep x-axis labels straight
legend.position = "right") +  # Adjust legend position
scale_fill_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M"))  # Use label_number to format as millions
# Line plot for total cases and total deaths over time
ggplot(eu_dataset, aes(x = date)) +
geom_line(aes(y = total_cases, color = "Total Cases")) +
geom_line(aes(y = total_deaths, color = "Total Deaths"), linetype = "dashed") +
labs(title = "Total Cases and Total Deaths Over Time",
x = "Date",
y = "Count") +
theme_minimal()
# Load the scales package
library(scales)
# Line plot for total cases and total deaths over time
ggplot(eu_dataset, aes(x = date)) +
geom_line(aes(y = total_cases, color = "Total Cases")) +
geom_line(aes(y = total_deaths, color = "Total Deaths"), linetype = "dashed") +
labs(title = "Total Cases and Total Deaths Over Time",
x = "Date",
y = "Count") +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +  # Format y-axis labels
theme_minimal()
# Line plot for total cases and total deaths over time
ggplot(eu_dataset, aes(x = date)) +
geom_line(aes(y = total_cases, color = "Total Cases")) +
geom_line(aes(y = total_deaths, color = "Total Deaths"), linetype = "dashed") +
labs(title = "Total Cases and Total Deaths Over Time",
x = "Date",
y = "Count") +
scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "M")) +  # Format y-axis labels
theme_minimal() +
labs(color = "Legend Title")  # Change legend title
# Assuming you have already loaded your dataset into a data frame named eu_dataset
# If not, you can load it using: eu_dataset <- read.csv('your_dataset.csv')
# Install and load the necessary library if not already installed
if (!require(ggplot2)) {
install.packages("ggplot2")
}
library(ggplot2)
# Select the top 5 countries with the highest total cases
top_countries <- names(sort(tapply(eu_dataset$total_cases, eu_dataset$location, max), decreasing = TRUE)[1:5])
# Convert date to Date type if it's not already
eu_dataset$date <- as.Date(eu_dataset$date)
# Plot scatter plots for each of the top 5 countries with numeric format for total cases
ggplot(subset(eu_dataset, location %in% top_countries), aes(x = date, y = total_cases, color = location)) +
geom_point() +
labs(title = 'Total Cases Over Time - Top 5 Countries',
x = 'Date',
y = 'Total Cases (in Millions)') +
theme_minimal() +
scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = "M"))  # Format labels in millions
